---
submission_id: 499
title: From manual labour to artificial intelligence: developments in data literacy using the example of the Repertorium Academicum Germanicum (2001-2024).

author:
  - name: Kaspar Gubler
    orcid: 0000-0002-6627-5045
    email: kaspar.gubler@unibe.ch
    affiliations:
      - University of Bern
keywords:
  - Digital Prosopography
  - History of universities
  - History of knowledge
  - Data visualisations
abstract: |
  The Repertorium Academicum Germanicum (RAG) is a prosopographical research project focussing on medieval scholars and their social influence in pre-modern Europe (1250-1550). The RAG database comprises around 62,000 scholars with 400,000 biographical data at 26,000 locations, taken from university registers and other university-related sources. The aim of the project is to create a prosopographical database for research into the influence of pre-modern European scholars. As a pioneering project in digital prosopography, the RAG is exemplary for the development of data competences in the last 20 years. The presentation will therefore highlight the methods, procedures, best practices and future approaches used to date. The data competences in RAG are divided into data collection and data analysis. Originally manual data collection is now supplemented by computer-aided procedures. Data analysis includes the selection of data, statistical evaluations and visualisations (maps, networks, time series), whereby the interpretation of the results and the historical contextualisation are of paramount importance. The use of artificial intelligence in both areas (collection and analysis) is also discussed, with a focus on its potential and transformative impact.
key-points:
  - Key point 1 (1 sentence)
  - Key point 2 (1 sentence)
  - Key point 3 (1 sentence)
date: 06-27-2024
bibliography: references.bib
---

## Introduction

This is a placeholder for the extended abstract of the paper. It should be between 1500 and 2000 words (excluding references).

Check <https://quarto.org/docs/authoring/markdown-basics.html> for more information on how to use markdown, <https://quarto.org/docs/authoring/cross-references.html> for more information on how to use cross-references like this (See @fig-example and @fig-plots), and <https://quarto.org/docs/authoring/footnotes-and-citations.html> for more information on how to use citations like this one [@haber2011, p. 11].

::: {#fig-example}

![Figure caption text.](images/placeholder.png)

:::

## Section 1

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat. Duis semper. Duis arcu massa, scelerisque vitae, consequat in, pretium a, enim. Pellentesque congue. Ut in risus volutpat libero pharetra tempor. Cras vestibulum bibendum augue. Praesent egestas leo in pede. Praesent blandit odio eu enim. Pellentesque sed dui ut augue blandit sodales. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam nibh. Mauris ac mauris sed pede pellentesque fermentum. Maecenas adipiscing ante non diam sodales hendrerit.

## Quarto Usage

For advanced users, we recommend exploring features as **Code Blocks**: Use triple backticks (```) to create code blocks. Specify the language for syntax highlighting (e.g., ```python`). Quarto lets you run code and embed its output directly into your document. See <https://quarto.org/docs/computations/inline-code.html> for guidance.

```{python}
#| output: false
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create some simple synthetic historical data
np.random.seed(0)
years = pd.date_range('1900-01-01', periods=120, freq='Y')
values = np.random.normal(loc=0, scale=1, size=120).cumsum()

data = pd.DataFrame({
    'Year': years.year,
    'Value': values
})

# Save the data to a CSV file
data.to_csv('data/sample_data.csv', index=False)
```

```{python}
#| label: fig-plots
# Plotting the data
plt.figure(figsize=(10, 6))
plt.plot(data['Year'], data['Value'], marker='o')
plt.title('Synthetic Historical Data')
plt.xlabel('Year')
plt.ylabel('Value')
plt.grid(True)
plt.show()
```
